apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"
    defaultConfig {
        applicationId "com.esminis.server.php"
        minSdkVersion 16
        targetSdkVersion 23
        versionName "1.7.4"
        versionCode 38 // should increment by 2 since 20
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        int versionCodeId = android.defaultConfig.versionCode
        arm {
            versionCode versionCodeId - 1
        }
        x86 {
            versionCode versionCodeId
        }
    }
    signingConfigs {
    }
    // Temporary while gradle does not fully support ndk
    sourceSets.arm {
        jniLibs.srcDir 'src/arm/libs'
        jni.srcDirs = []
    }
    sourceSets.x86 {
        jniLibs.srcDir 'src/x86/libs'
        jni.srcDirs = []
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.android.support:support-v4:23.0.0'
    compile 'com.android.support:appcompat-v7:23.0.0'
    compile 'com.android.support:design:23.0.0'
    compile 'com.squareup:otto:1.3.8'
    compile 'io.reactivex:rxandroid:0.25.0'
}

// Temporary while gradle does not fully support ndk
android.applicationVariants.all { variant ->
    def ndkBuild = android.ndkDirectory.absolutePath + "/ndk-build"
    def jniDir = file("src/" + variant.properties.get('flavorName') + "/jni").absolutePath
    variant.javaCompile.dependsOn project.tasks.create(
        name: "build_" + (String)variant.name, type: Exec
    ) {
        commandLine ndkBuild, '-C', jniDir
    }
    clean.dependsOn project.tasks.create(name: "clean_" + (String)variant.name, type: Exec) {
        commandLine ndkBuild, '-C', jniDir, 'clean'
    }
}