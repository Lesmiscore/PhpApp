apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    defaultConfig {
        applicationId "com.esminis.server.php"
        minSdkVersion 16
        targetSdkVersion 23
        versionName "1.7.8"
        versionCode 46 // should increment by 2 since 20
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        int versionCodeId = android.defaultConfig.versionCode
        developmentNoJniLibs {
            versionCode versionCodeId - 1
        }
        arm {
            versionCode versionCodeId - 1
        }
        x86 {
            versionCode versionCodeId
        }
    }
    signingConfigs {
    }
    // Temporary while gradle does not fully support ndk
    sourceSets.developmentNoJniLibs {
        jni.srcDirs = []
    }
    sourceSets.arm {
        jniLibs.srcDir 'src/arm/libs'
        jni.srcDirs = []
    }
    sourceSets.x86 {
        jniLibs.srcDir 'src/x86/libs'
        jni.srcDirs = []
    }
    android {
        packagingOptions {
            exclude 'META-INF/LICENSE.txt'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    apt 'com.google.dagger:dagger-compiler:2.0'
    compile 'javax.inject:javax.inject:1'
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'com.google.dagger:dagger:2.0'
    compile project(':Library')
}

// Temporary while gradle does not fully support ndk
android.applicationVariants.all { variant ->
    if (variant.properties.get('flavorName').equals("developmentNoJniLibs")) {
        return;
    }
    def ndkBuild = android.ndkDirectory.absolutePath + "/ndk-build"
    def jniDir = file("src/" + variant.properties.get('flavorName') + "/jni").absolutePath
    variant.javaCompile.dependsOn project.tasks.create(
        name: "build_" + (String)variant.name, type: Exec
    ) {
        commandLine ndkBuild, '-C', jniDir
    }
    clean.dependsOn project.tasks.create(name: "clean_" + (String)variant.name, type: Exec) {
        commandLine ndkBuild, '-C', jniDir, 'clean'
    }
}